const express = require("express");
const path = require("path");
const methodOverride = require("method-override");
const ejsMate = require("ejs-mate");
const mongoose = require("mongoose");
const Listing = require("./models/listing.js");
const wrapAsync = require("./utils/wrapAsync.js");
const ExpressError = require("./utils/ExpressError.js");
const { reviewModel } = require("./models/review.js");
const { listingSchema, reviewSchema } = require('./schema.js');
const listingRoutes = require("./routers/listing.js");
const reviewRoutes = require("./routers/review.js");
const app = express();

app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));
app.engine("ejs", ejsMate);
app.use(express.static(path.join(__dirname, "public")));
app.use(express.urlencoded({ extended: true }));
let MONGO_URL = "mongodb://127.0.0.1:27017/wanderlust";
app.use(methodOverride("_method"));

mongoose.connect(MONGO_URL)
    .then(() => {
        console.log("Connected to MongoDB");
    })
    .catch((err) => {
        console.log("Error connecting to MongoDB:", err);
    });

// Validation middleware
// const validateListing = (req, res, next) => {
//     let { error } = listingSchema.validate(req.body);
//     if (error) {
//         // console.log(error)
//         let errMsg = error.details.map((e) => e.message);
//         console.log(errMsg)
//         throw new ExpressError(400, errMsg);

//     } else {
//         next();
//     }
// };

//REVIEW MIDDLEWARE
// const validateReview = (req, res, next) => {
//     const { error } = reviewSchema.validate(req.body); 
//     console.log(error);
//     if (error) {
//         const errMsg = error.details.map((e) => e.message).join(', ');
//         console.log(errMsg);
//         throw new ExpressError(400, errMsg);
//     } else {
//         next();
//     }
// };


// Routes

// app.get("/", wrapAsync((req, res) => {
//     res.send("ILOVERADHAKRISHNAPERMANLTYUUUUUU");
// }));

// // LISTING ALL
// app.get("/listings", wrapAsync(async (req, res) => {
//     let lists = await Listing.find({});
//     res.render("index.ejs", { lists });
// }));

// // SHOW NEW ONE
// app.get("/listings/new", wrapAsync((req, res) => {
//     res.render("new.ejs");
// }));

// // CREATE NEW LISTING
// app.post("/listings", validateListing, wrapAsync(async (req, res, next) => {
//     const newListing = new Listing(req.body.listing);
//     await newListing.save();
//     res.redirect("/listings");
// }));

// // EDIT SECTIONS
// app.get("/listings/:id/edit", wrapAsync(async (req, res) => {
//     let { id } = req.params;
//     let post = await Listing.findById(id);
//     res.render("edit.ejs", { post });
// }));

// // SHOW SPECIFIC LISTING
// app.get("/listings/:id", wrapAsync(async (req, res) => {
//     let { id } = req.params;
//     let post = await Listing.findById(id).populate("review");
//     console.log(post.review);
//     res.render("show.ejs", { post });
// }));

// // UPDATE LISTING
// app.put("/listings/:id/edit", validateListing, wrapAsync(async (req, res) => {
//     let { id } = req.params;
//     await Listing.findByIdAndUpdate(id, { ...req.body.listing });
//     res.redirect(`/listings/${id}`);
// }));


app.use("/listings",listingRoutes);
app.use("/listings/:id/reviews", reviewRoutes);

// app.post("/listings/:id/reviews",  validateReview, wrapAsync(async (req, res) => {
//     const { id } = req.params;
//     console.log(req.body);
//     const listing = await Listing.findById(id);
//     const review = new reviewModel(req.body.review);
//     console.log(review);
//     await review.save();
//     listing.review.push(review);  
//     await listing.save();
//     res.redirect(`/listings/${id}`);
// }));


app.all("*", (req, res, next) => {
    next(new ExpressError(404, "Page Not Found"));
});


app.use((err, req, res, next) => {
    const { statusCode = 500, message = "Something went wrong!" } = err;
    if (res.headersSent) {
        return next(err);
    }
    res.status(statusCode).render("error.ejs", { message });
});


app.listen(8090, () => {
    console.log("radhakrishnaloveuuuuumapemrnlatyyyyyyuuuuuuuu");
    console.log(`Server running on port 8090`);
});
